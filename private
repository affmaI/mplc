util.require_natives(1676318796)
local vehicle_spawn_data = {
    {pos = {x = 7435.7, y = -2500.2, z = 5.8}, model_name = "ah6lb"},
    {pos = {x = 7681.9, y = -3074.4, z = 5.8}, model_name = "c130h"},
    {pos = {x = 7522.7, y = -3256.2, z = 5.8}, model_name = "be3s"},
    {pos = {x = 7559.7, y = -2658.9, z = 5.8}, model_name = "abrams"},
    {pos = {x = 6548.54, y = -1309.14, z = 5.10}, model_name = "zentorno"},
    {pos = {x = 5989.7, y = -4116.0, z = -0.3}, model_name = "lcviolator"},
    {pos = {x = 6662.9, y = -3982.0, z = -0.4}, model_name = "lcviolator"},
    {pos = {x = 3033.1, y = -3104.6, z = 12.0}, model_name = "fdlctruck2"},
    {pos = {x = 3309.9, y = -3584.1, z = 3.1}, model_name = "lctrash3"},
    {pos = {x = 4145.3, y = -3770.1, z = 2.9}, model_name = "lcpdstockade"},
    {pos = {x = 4273.3, y = -3754.4, z = -0.2}, model_name = "lcpdshark"},
    {pos = {x = 5889.7, y = -3413.9, z = -0.4}, model_name = "lcpdpredator"},
    {pos = {x = 5354.1, y = -1986.6, z = -0.6}, model_name = "lcpdpredator"},
    {pos = {x = 5104.2, y = -2330.0, z = 14.6}, model_name = "lcpdtow"},
    {pos = {x = 6182.1, y = -1363.4, z = 23.9}, model_name = "lcpdboxville"},
    {pos = {x = 5111.0, y = -4067.2, z = 5.2}, model_name = "npatriot"},
    {pos = {x = 4913.2, y = -3847.6, z = 4.8}, model_name = "lcpdscout"},
    {pos = {x = 4599.4, y = -2990.2, z = 4.7}, model_name = "lcpdtru"},
    {pos = {x = 6294.7, y = -3467.9, z = 22.2}, model_name = "g6buffalo"},
    {pos = {x = 4562.8, y = -3090.9, z = 4.7}, model_name = "bcpd13"},
    {pos = {x = 5280.6, y = -2013.8, z = 15.9}, model_name = "bcpd17"},
    {pos = {x = 4036.6, y = -3710.0, z = 2.2}, model_name = "bcpd17"},
    {pos = {x = 5381.6, y = -3527.7, z = 12.2}, model_name = "hwaycar2"},
    {pos = {x = 6612.9, y = -4069.6, z = 8.3}, model_name = "hwaycar2"},
    {pos = {x = 6819.9, y = -2827.0, z = 29.0}, model_name = "hwaycar2"},
    {pos = {x = 7351.9, y = -2412.1, z = 18.5}, model_name = "hwaymav"},
    {pos = {x = 5386.7, y = -3455.0, z = 55.8}, model_name = "hwaymav"},
    {pos = {x = 6521.6, y = -3886.2, z = 12.6}, model_name = "tesla11"},
    {pos = {x = 5967.2, y = -3342.6, z = 5.8}, model_name = "gtbf"},
    {pos = {x = 3918.9, y = -1612.3, z = 30.8}, model_name = "lp700"},
    {pos = {x = 3918.9, y = -1612.3, z = 30.8}, model_name = "gtrnismo"},
    {pos = {x = 6282.7, y = -4035.1, z = 4.0}, model_name = "mrtasty"},
    {pos = {x = 6093.2, y = -4070.4, z = 4.1}, model_name = "mrtasty"},
    {pos = {x = 6599.0, y = -3946.5, z = 3.1}, model_name = "lcpdyo"},
    {pos = {x = 6646.2, y = -4031.7, z = 1.2}, model_name = "lcpdbtrailer"},
    {pos = {x = 3062.4, y = -3110.5, z = 18.7}, model_name = "lcpdsparrow"},
    {pos = {x = 5281.1, y = -3084.4, z = 65.3}, model_name = "lcmav"},
    {pos = {x = 6646.9, y = -3900.9, z = -0.5}, model_name = "dodo"},
    {pos = {x = 6082.2, y = -1318.1, z = 35.5}, model_name = "LLexecutioner"},
    {pos = {x = 6254.3, y = -1308.8, z = 13.4}, model_name = "llmerit"},
    {pos = {x = 6338.3, y = -1271.7, z = 11.0}, model_name = "llsteed"},
    {pos = {x = 6277.6, y = -4084.0, z = -0.2}, model_name = "seashark"},
    {pos = {x = 4440.0, y = -1687.6, z = -0.4}, model_name = "seashark3"},
    {pos = {x = 6265.3, y = -4084.3, z = -0.4}, model_name = "seashark2"},
    {pos = {x = 6213.4, y = -4053.7, z = 4.1}, model_name = "lguard"},
    {pos = {x = 6338.1, y = -4040.9, z = 3.1}, model_name = "lguard"},
    {pos = {x = 4472.8, y = -1845.1, z = -0.4}, model_name = "longfin"},
    {pos = {x = 5970.8, y = -2097.4, z = -0.5}, model_name = "kosatka"},
    {pos = {x = 6362.7, y = -4043.5, z = 1.9}, model_name = "polcaracara"},
    {pos = {x = 4597.404, y = -2042.558, z = 9.516}, model_name = "baller"}
}
local animal_spawn_data = {
{pos = {x = 7104.11, y = -3200.47, z = 11.47}, model_name = "a_c_cow"},
{pos = {x = 7788.76, y = -3126.31, z = 2.79}, model_name = "a_c_cow"},
{pos = {x = 4440.6, y = -1806.6, z = 1.8}, model_name = "a_c_cow"},
{pos = {x = 3482.30, y = -3904.63, z = 3.87}, model_name = "a_c_cow"},
{pos = {x = 6444.0, y = -1267.0, z = 13.3}, model_name = "a_c_cow"},
{pos = {x = 6352.7, y = -1288.7, z = 10.1}, model_name = "a_c_cow"},
{pos = {x = 4241.6, y = -1560.8, z = 23.3}, model_name = "a_c_cow"},
{pos = {x = 7718.0, y = -3266.2, z = 3.2}, model_name = "Lepoard"},
{pos = {x = 4867.26, y = -2465.07, z = 10.84}, model_name = "a_c_husky"},
{pos = {x = 4900.51, y = -2149.77, z = 11.47}, model_name = "a_c_husky"},
{pos = {x = 5098.00, y = -2165.52, z = 13.69}, model_name = "a_c_husky"},
{pos = {x = 6331.8, y = -4046.6, z = 3.0}, model_name = "a_c_husky"},
{pos = {x = 4066.7, y = -1632.7, z = 34.6}, model_name = "a_c_husky"},
{pos = {x = 6548.54, y = -1309.14, z = 5.10}, model_name = "a_c_chickenhawk"},
{pos = {x = 4233.2, y = -1443.7, z = 23.5}, model_name = "a_c_chickenhawk"},
{pos = {x = 4200.2, y = -1326.9, z = 26.1}, model_name = "a_c_chickenhawk"},
{pos = {x = 2954.14, y = -3286.00, z = 7.59}, model_name = "a_c_deer"},
{pos = {x = 3371.04, y = -2560.75, z = 7.36}, model_name = "a_c_deer"},
{pos = {x = 6454.9, y = -1288.1, z = 13.8}, model_name = "a_c_deer"},
{pos = {x = 4271.6, y = -1627.0, z = 26.0}, model_name = "a_c_deer"},
{pos = {x = 4308.6, y = -1661.5, z = 27.1}, model_name = "a_c_deer"},
{pos = {x = 4266.9, y = -1545.2, z = 25.0}, model_name = "a_c_deer"},
{pos = {x = 4280.6, y = -1529.6, z = 20.3}, model_name = "a_c_deer"},
{pos = {x = 4285.9, y = -1631.5, z = 27.2}, model_name = "a_c_deer"},
{pos = {x = 4308.1, y = -1622.7, z = 23.7}, model_name = "a_c_deer"},
{pos = {x = 4311.18, y = -3254.13, z = -6.33}, model_name = "a_c_humpback"},
{pos = {x = 3615.3, y = -3403.7, z = -2.5}, model_name = "a_c_humpback"},
{pos = {x = 5667.9, y = -2744.9, z = -1.5}, model_name = "a_c_humpback"},
{pos = {x = 6414.7, y = -2010.6, z = -2.2}, model_name = "a_c_humpback"},
{pos = {x = 4090.09, y = -4211.64, z = -7.31}, model_name = "a_c_dolphin"},
{pos = {x = 4631.14, y = -3784.96, z = -1.07}, model_name = "a_c_dolphin"},
{pos = {x = 4631.14, y = -3784.96, z = -1.07}, model_name = "a_c_dolphin"},
{pos = {x = 4631.14, y = -3784.96, z = -1.07}, model_name = "a_c_dolphin"},
{pos = {x = 4631.14, y = -3784.96, z = -1.07}, model_name = "a_c_dolphin"},
{pos = {x = 4631.14, y = -3784.96, z = -1.07}, model_name = "a_c_dolphin"},
{pos = {x = 5792.09, y = -3710.73, z = -20.53}, model_name = "a_c_dolphin"},
{pos = {x = 4119.8, y = -3403.0, z = -1.2}, model_name = "a_c_dolphin"},
{pos = {x = 4520.0, y = -2562.7, z = -1.6}, model_name = "a_c_dolphin"},
{pos = {x = 4131.51, y = -4205.85, z = -1.28}, model_name = "a_c_sharktiger"},
{pos = {x = 4305.56, y = -3961.72, z = -1.85}, model_name = "a_c_sharktiger"},
{pos = {x = 4943.18, y = -3849.04, z = 4.78}, model_name = "a_c_cat_01"},
{pos = {x = 3494.70, y = -3016.17, z = 20.34}, model_name = "a_c_cat_01"},
{pos = {x = 4624.427, y = -2691.954, z = 5.660}, model_name = "a_c_cat_01"},
{pos = {x = 4518.884, y = -2250.470, z = 8.855}, model_name = "a_c_cat_01"},
{pos = {x = 6543.8, y = -4053.3, z = 8.3}, model_name = "a_c_cat_01"},
{pos = {x = 4553.8, y = -3083.9, z = 4.8}, model_name = "a_c_cat_01"},
{pos = {x = 4697.6, y = -2157.0, z = 10.0}, model_name = "a_c_cat_01"},
{pos = {x = 3783.3, y = -2307.3, z = 20.0}, model_name = "a_c_cat_01"},
{pos = {x = 5231.1, y = -2978.0, z = 67.7}, model_name = "a_c_cormorant"},
{pos = {x = 5156.1, y = -3152.6, z = 14.8}, model_name = "a_c_rat"},
{pos = {x = 5154.5, y = -3338.8, z = 14.6}, model_name = "A_C_Poodle"},
{pos = {x = 6180.0, y = -4046.6, z = 4.9}, model_name = "A_C_Poodle"},
{pos = {x = 6099.6, y = -4105.1, z = 1.9}, model_name = "A_C_Poodle"},
{pos = {x = 5099.9, y = -3591.1, z = 14.7}, model_name = "A_C_Poodle"},
{pos = {x = 5660.0, y = -2915.3, z = 8.6}, model_name = "A_C_MtLion_02"},
{pos = {x = 5709.5, y = -3313.2, z = 9.3}, model_name = "A_C_Pig"},
{pos = {x = 5661.9, y = -3299.7, z = 9.3}, model_name = "A_C_Pig"},
{pos = {x = 4360.8, y = -1640.0, z = 2.8}, model_name = "A_C_Pig"},
{pos = {x = 6347.2, y = -1216.0, z = 1.7}, model_name = "A_C_Pig"},
{pos = {x = 6482.1, y = -1286.1, z = 13.2}, model_name = "A_C_Pig"},
{pos = {x = 5022.02, y = -2116.35, z = 14.27}, model_name = "a_c_retriever"},
{pos = {x = 6547.8, y = -4097.3, z = 8.4}, model_name = "a_c_retriever"},
{pos = {x = 6085.2, y = -4096.7, z = 2.8}, model_name = "a_c_retriever"},
{pos = {x = 4392.8, y = -1764.8, z = 16.6}, model_name = "a_c_retriever"},
{pos = {x = 5101.44, y = -2356.69, z = 14.98}, model_name = "a_c_retriever"},
{pos = {x = 4511.59, y = -3436.45, z = 4.85}, model_name = "a_c_retriever"},
{pos = {x = 6689.2, y = -2744.3, z = 29.4}, model_name = "a_c_retriever"},
{pos = {x = 4570.4, y = -2529.8, z = 4.7}, model_name = "a_c_retriever"},
{pos = {x = 4855.89, y = -2544.54, z = 13.10}, model_name = "a_c_shepherd"},
{pos = {x = 4274.4, y = -1653.5, z = 27.2}, model_name = "a_c_shepherd"},
{pos = {x = 6647.3, y = -2619.8, z = 29.4}, model_name = "a_c_shepherd"},
{pos = {x = 4646.20, y = -4171.56, z = 4.83}, model_name = "a_c_shepherd"},
{pos = {x = 5371.2, y = -2137.5, z = 12.8}, model_name = "a_c_shepherd"},
{pos = {x = 6520.5, y = -4106.6, z = 8.2}, model_name = "a_c_shepherd"},
{pos = {x = 6049.4, y = -4110.3, z = 2.2}, model_name = "a_c_shepherd"},
{pos = {x = 5795.6, y = -2208.9, z = 2.8}, model_name = "a_c_shepherd"},
{pos = {x = 4565.0, y = -3563.9, z = 5.6}, model_name = "a_c_shepherd"},
{pos = {x = 4496.4, y = -2262.0, z = 4.1}, model_name = "a_c_shepherd"},
{pos = {x = 6274.4, y = -4054.3, z = 3.1}, model_name = "a_c_shepherd"},
{pos = {x = 5803.5, y = -2238.3, z = 2.8}, model_name = "a_c_coyote"},
{pos = {x = 6489.7, y = -1776.3, z = 15.9}, model_name = "a_c_coyote"},
{pos = {x = 6627.9, y = -4015.4, z = 3.4}, model_name = "a_c_coyote"},
{pos = {x = 6472.4, y = -1277.8, z = 12.7}, model_name = "a_c_coyote"},
{pos = {x = 4167.2, y = -1364.6, z = 24.4}, model_name = "a_c_coyote"},
{pos = {x = 3811.2, y = -1452.4, z = 17.1}, model_name = "a_c_coyote"},
{pos = {x = 5086.40, y = -2262.29, z = 13.34}, model_name = "a_c_boar"},
{pos = {x = 6655.27, y = -2389.14, z = 16.36}, model_name = "a_c_boar"},
{pos = {x = 6684.98, y = -2784.83, z = 28.01}, model_name = "a_c_boar"},
{pos = {x = 6416.1, y = -1269.1, z = 12.9}, model_name = "a_c_boar"},
{pos = {x = 6811.8, y = -2457.2, z = 26.2}, model_name = "a_c_boar"},
{pos = {x = 6099.8, y = -2265.0, z = 8.2}, model_name = "a_c_boar"},
{pos = {x = 4274.0, y = -1385.9, z = 26.0}, model_name = "a_c_boar"},
{pos = {x = 4949.13, y = -2203.23, z = 6.29}, model_name = "a_c_rottweiler"},
{pos = {x = 5171.15, y = -2722.76, z = 14.72}, model_name = "a_c_rottweiler"},
{pos = {x = 6490.6, y = -2160.5, z = 7.9}, model_name = "a_c_rottweiler"},
{pos = {x = 6603.5, y = -3953.8, z = 3.1}, model_name = "a_c_rottweiler"},
{pos = {x = 5066.8, y = -3889.5, z = 14.8}, model_name = "a_c_rottweiler_02"},
{pos = {x = 6264.4, y = -4037.3, z = 4.0}, model_name = "a_c_rottweiler_02"},
{pos = {x = 3494.70, y = -3016.17, z = 20.34}, model_name = "a_c_cat_01"},
{pos = {x = 7429.63, y = -3384.34, z = 4.55}, model_name = "a_c_mtlion"},
{pos = {x = 7984.23, y = -2910.17, z = 5.53}, model_name = "a_c_mtlion"},
{pos = {x = 3114.5, y = -3840.1, z = -2.7}, model_name = "A_C_Stingray"},
{pos = {x = 3114.5, y = -3840.1, z = -2.7}, model_name = "A_C_Stingray"},
{pos = {x = 3114.5, y = -3840.1, z = -2.7}, model_name = "A_C_Stingray"},
{pos = {x = 3756.7, y = -3951.6, z = -2.3}, model_name = "A_C_Stingray"},
{pos = {x = 3756.7, y = -3951.6, z = -2.3}, model_name = "A_C_Stingray"},
{pos = {x = 4280.1, y = -3750.9, z = -3.8}, model_name = "A_C_Stingray"},
{pos = {x = 4280.1, y = -3750.9, z = -3.8}, model_name = "A_C_Stingray"},
{pos = {x = 4521.9, y = -3567.7, z = -1.5}, model_name = "A_C_Stingray"},
{pos = {x = 4398.1, y = -3348.3, z = -1.0}, model_name = "A_C_Stingray"},
{pos = {x = 4398.1, y = -3348.3, z = -1.0}, model_name = "A_C_Stingray"},
{pos = {x = 4672.7, y = -3686.2, z = -1.5}, model_name = "A_C_Stingray"},
{pos = {x = 4672.7, y = -3686.2, z = -1.5}, model_name = "A_C_Stingray"},
{pos = {x = 4407.6, y = -3942.3, z = -1.7}, model_name = "A_C_KillerWhale"},
{pos = {x = 4407.6, y = -3942.3, z = -1.7}, model_name = "A_C_KillerWhale"},
{pos = {x = 5922.4, y = -2733.8, z = -1.9}, model_name = "A_C_KillerWhale"},
{pos = {x = 5517.4, y = -2738.4, z = -1.7}, model_name = "A_C_KillerWhale"},
{pos = {x = 5397.2, y = -1912.6, z = -2.1}, model_name = "A_C_KillerWhale"},
{pos = {x = 5211.2, y = -1564.5, z = -1.3}, model_name = "A_C_KillerWhale"},
{pos = {x = 6208.7, y = -1792.9, z = -6.3}, model_name = "A_C_KillerWhale"},
{pos = {x = 4740.306, y = -1457.793, z = 3.462}, model_name = "a_c_rat"},
{pos = {x = 631.28, y = -2735.44, z = 6.16}, model_name = "IG_IslDJ_00"},
{pos = {x = 5790.3, y = -3437.1, z = -4.6}, model_name = "a_c_sharktiger"},
{pos = {x = 5005.47, y = -2542.00, z = 10.44}, model_name = "a_c_deer"},
{pos = {x = 5971.5, y = -1291.6, z = 23.6}, model_name = "BrnBear"},
{pos = {x = 6109.8, y = -1271.0, z = 17.5}, model_name = "rangehorse"},
{pos = {x = 6123.3, y = -1269.0, z = 16.0}, model_name = "rangehorse"},
{pos = {x = 6155.6, y = -1246.8, z = 3.5}, model_name = "rangehorse"},
{pos = {x = 5767.2, y = -1197.2, z = 1.8}, model_name = "rangehorse"},
{pos = {x = 5769.4, y = -1190.7, z = 2.1}, model_name = "rangehorse"},
{pos = {x = 6126.1, y = -1242.4, z = 4.6}, model_name = "rangehorse"},
{pos = {x = 4414.7, y = -1751.4, z = 12.3}, model_name = "rangehorse"},
{pos = {x = 3407.9, y = -3577.4, z = 3.0}, model_name = "A_C_Hen"}
}
local modnpc_spawn_data = {
    {pos = {x = 7381.6, y = -2635.0, z = 6.1}, model_name = "fighter"},
    {pos = {x = 6123.1, y = -4116.3, z = 14.7}, model_name = "fighter"},
    {pos = {x = 6641.9, y = -3193.9, z = 25.3}, model_name = "fighter"},
    {pos = {x = 5226.0, y = -3651.5, z = 14.8}, model_name = "fighter"},
    {pos = {x = 5226.0, y = -3651.5, z = 14.8}, model_name = "fighter"},
    {pos = {x = 6474.3, y = -3783.3, z = 14.5}, model_name = "fighter"},
    {pos = {x = 7080.7, y = -2559.6, z = 23.9}, model_name = "fighter"},
    {pos = {x = 4565.9, y = -3108.8, z = 4.8}, model_name = "fighter"},
    {pos = {x = 5961.7, y = -1427.0, z = 39.4}, model_name = "fighter"},
    {pos = {x = 5326.0, y = -4098.3, z = 5.0}, model_name = "fighter"},
    {pos = {x = 4653.6, y = -4042.4, z = 4.8}, model_name = "fighter"},
    {pos = {x = 4954.9, y = -2802.9, z = 14.8}, model_name = "g_m_y_pr"},
    {pos = {x = 7385.5, y = -2635.1, z = 6.0}, model_name = "CSB_Vincent_4"}
}
local food_vendor_data = {
    {pos = {x = 6826.1, y = -3031.5, z = 25.2}, model_name = "U_M_Y_BurgerDrug_01"},
    {pos = {x = 6390.6, y = -3910.9, z = 16.8}, model_name = "U_M_Y_BurgerDrug_01"},
    {pos = {x = 4180.9, y = -1628.2, z = 24.3}, model_name = "U_M_Y_BurgerDrug_01"},
    {pos = {x = 5640.7, y = -1751.5, z = 16.3}, model_name = "U_M_Y_BurgerDrug_01"},
    {pos = {x = 4572.6, y = -3123.8, z = 4.8}, model_name = "U_M_Y_BurgerDrug_01"}
}
local zones_tp = {
    {
        name = "Hangar A",
        zone_pos = {x = 7365.8, y = -2496.9, z = 5.8},
        tp_pos = {x = -1238.6, y = -2997.6, z = -45},
        activation_radius = 2.5,
        blip_id = -1
    },
    {
        name = "Comico",
        zone_pos = {x = 4781.6, y = -2974.6, z = 13.1},
        tp_pos = {x = 4781.5, y = -2972.0, z = 13.7},
        activation_radius = 2.5,
        blip_id = -1
    },
    {
        name = "Garage",
        zone_pos = {x = 4762.2, y = -3523.6, z = 7.0},
        tp_pos = {x= 796.2, y = 308.0, z = 85.7},
        activation_radius = 20.5,
        blip_id = -1
    },
    {
        name = "Appartment",
        zone_pos = {x = 4780.5, y = -3043.4, z = 10.5},
        tp_pos = {x= -777.8, y = 340.0, z = 207.9},
        activation_radius = 20.5,
        blip_id = -1
    },
    {
        name = "Liberty City",
        zone_pos = {x = 1545.2, y = 255.8, z = -46.0},
        tp_pos = {x = 4780.5, y = -3043.4, z = 10.5},
        activation_radius = 2.5,
        blip_id = -1
    },
    {
        name = "Mansion",
        zone_pos = {x =6511.3, y =-4103.2, z =8.9},
        tp_pos = {x =6508.5, y =-4103.2, z =8.9},
        activation_radius = 2.5,
        blip_id = 770
    },
    {
        name = "Penthouse",
        zone_pos = {x = 5036.8, y = -2698.3, z = 14.8},
        tp_pos  = {x = 1380.2, y = 181.7, z = -49.0},
        activation_radius = 2.5,
        blip_id = -1
    }
}
local food_ui_visible = false
local food_ui_timer = 0
local vehicle_spawn_distance = 50.0
local vehicle_despawn_distance = 70.0
local animal_spawn_distance = 50.0
local animal_despawn_distance = 70.0
local modnpc_spawn_distance = 50.0
local modnpc_despawn_distance = 70.0
local signModel = util.joaat("m25_1_prop_m51_prixsigncs_01a")
local signCoords = { x = 60.3, y = -1273.0, z = 29.3 }
local signHeading = 0.0
local signObj = nil
local bought = false
local interactDistance = 2.5
local spawnDistance = 50.0
local removeDistance = 300.0
local DISPLAY_HELP = "Appuyez sur ~INPUT_CONTEXT~ pour acheter cette propriété ($100,000)"
local vehicles_active = false
local animals_active = false
local modnpc_active = false
local food_vendors_active = true
local spawned_vehicles = {}
local spawned_animals = {}
local spawned_modnpc = {}
local spawned_food_vendors = {}
local modnpc_blips = {}
function give_money(amount)
    local bank = util.stat_get_int64(util.joaat("BANK_BALANCE"))
    STATS.STAT_SET_INT(util.joaat("BANK_BALANCE"), bank + amount)
    util.toast(" Argent Donner : $" .. amount)
end
local function show_help_text(msg)
    HUD.BEGIN_TEXT_COMMAND_DISPLAY_HELP("STRING")
    HUD.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(msg)
    HUD.END_TEXT_COMMAND_DISPLAY_HELP(0, false, true, -1)
end
local function give_money_to_nearby_modnpc()
    local playerPed = PLAYER.PLAYER_PED_ID()
    local playerPos = ENTITY.GET_ENTITY_COORDS(playerPed, true)
    for i, ped in pairs(spawned_modnpc) do
        if ped and ENTITY.DOES_ENTITY_EXIST(ped) and not ENTITY.IS_ENTITY_DEAD(ped) then
            local pedPos = ENTITY.GET_ENTITY_COORDS(ped, true)
            local dist = SYSTEM.VDIST(playerPos.x, playerPos.y, playerPos.z, pedPos.x, pedPos.y, pedPos.z)
            if dist < 3.0 then
                show_help_text("Appuyez sur ~y~E~s~ pour donner de l'argent")
                if PAD.IS_CONTROL_JUST_PRESSED(0, 38) then
                    give_money(-1)
                    util.toast("💵 Vous avez donné de l'argent au PNJ.")
                    util.toast("🤝 Le PNJ vous remercie !")
                    local animDict = "mp_safehouselost@"
                    local animName = "package_dropoff"
                    STREAMING.REQUEST_ANIM_DICT(animDict)
                    local timeout = util.current_time_millis() + 5000
                    while not STREAMING.HAS_ANIM_DICT_LOADED(animDict) do
                        if util.current_time_millis() > timeout then break end
                        util.yield()
                    end

                    TASK.TASK_PLAY_ANIM(ped, animDict, animName, 8.0, -8.0, 1500, 0, 0, false, false, false)
                end
            end
        end
    end
end
local function draw_food_ui()
    if not food_ui_visible then return end
    local now = util.current_time_millis()
    if now > food_ui_timer then
        food_ui_visible = false
        return
    end
    local x = 0.75
    local y = 0.05
    directx.draw_rect(x - 0.01, y - 0.015, 0.20, 0.08, {r = 0, g = 0, b = 0, a = 0.6})
    directx.draw_text(x, y, " Burger Shot", ALIGN_TOP_LEFT, 0.6, {r = 1.0, g = 0.5, b = 0.0, a = 1.0})
    directx.draw_text(x, y + 0.025, "1. Burger - $5", ALIGN_TOP_LEFT, 0.45, {r = 1, g = 1, b = 1, a = 1})
    directx.draw_text(x, y + 0.045, "2. Soda - $3", ALIGN_TOP_LEFT, 0.45, {r = 1, g = 1, b = 1, a = 1})
    directx.draw_text(x, y + 0.065, "3. Frites - $2", ALIGN_TOP_LEFT, 0.45, {r = 1, g = 1, b = 1, a = 1})
end
util.create_tick_handler(function()
    if modnpc_active then
        give_money_to_nearby_modnpc()
    end
    return true
end)
local function request_model(model_hash)
    if not STREAMING.IS_MODEL_VALID(model_hash) then
        util.toast("❌ Modèle invalide : " .. tostring(model_hash))
        return false
    end
    STREAMING.REQUEST_MODEL(model_hash)
    local timeout = util.current_time_millis() + 5000
    while not STREAMING.HAS_MODEL_LOADED(model_hash) do
        if util.current_time_millis() > timeout then
            util.toast("⏰ Timeout chargement modèle : " .. tostring(model_hash))
            return false
        end
        util.yield()
    end
    return true
end
local function spawn_vehicle_at_index(i)
    local data = vehicle_spawn_data[i]
    local model_hash = util.joaat(data.model_name)
    if not request_model(model_hash) then return end
    local pos = data.pos
    local vehicle = VEHICLE.CREATE_VEHICLE(model_hash, pos.x, pos.y, pos.z, 0.0, true, false, false)
    ENTITY.SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true)
    spawned_vehicles[i] = vehicle
    util.toast("🚗 Véhicule spawn: " .. data.model_name)
end
function spawn_sign()
    STREAMING.REQUEST_MODEL(signModel)
    while not STREAMING.HAS_MODEL_LOADED(signModel) do
        util.yield()
    end
    signObj = OBJECT.CREATE_OBJECT_NO_OFFSET(signModel, signCoords.x, signCoords.y, signCoords.z, true, false, true)
    ENTITY.SET_ENTITY_HEADING(signObj, signHeading)
    ENTITY.FREEZE_ENTITY_POSITION(signObj, true)
    STREAMING.SET_MODEL_AS_NO_LONGER_NEEDED(signModel)
end
function delete_sign()
    if signObj and ENTITY.DOES_ENTITY_EXIST(signObj) then
        entities.delete_by_handle(signObj)
        signObj = nil
    end
end
local function spawn_food_vendor_at_index(i)
    local vendor = food_vendor_data[i]
    if not vendor then return end
    local modelHash = util.joaat(vendor.model_name)
    if not request_model(modelHash) then return end
    local pos = v3(vendor.pos.x, vendor.pos.y, vendor.pos.z)
    local ped = entities.create_ped(28, modelHash, pos, 0.0)
    if ped then
        TASK.TASK_START_SCENARIO_IN_PLACE(ped, "WORLD_HUMAN_STAND_IMPATIENT", 0, true)
        spawned_food_vendors[i] = ped
    end
end
local last_check_time_vendors = 0
util.create_tick_handler(function()
    local now = util.current_time_millis()
    if not food_vendors_active or now - last_check_time_vendors < 10000 then return true end
    last_check_time_vendors = now
    local playerPed = PLAYER.PLAYER_PED_ID()
    local playerPos = ENTITY.GET_ENTITY_COORDS(playerPed, true)
    for i, vendor in pairs(food_vendor_data) do
        local dist = SYSTEM.VDIST(playerPos.x, playerPos.y, playerPos.z, vendor.pos.x, vendor.pos.y, vendor.pos.z)

        if dist < 50.0 then
            if not spawned_food_vendors[i] then
                spawn_food_vendor_at_index(i)
            end
        elseif spawned_food_vendors[i] then
            if ENTITY.DOES_ENTITY_EXIST(spawned_food_vendors[i]) then
                entities.delete_by_handle(spawned_food_vendors[i])
            end
            spawned_food_vendors[i] = nil
        end
    end
    return true
end)
local function delete_vehicle_at_index(i)
    local veh = spawned_vehicles[i]
    if veh and ENTITY.DOES_ENTITY_EXIST(veh) then
        entities.delete_by_handle(veh)
    end
    spawned_vehicles[i] = nil
end
local function clear_all_spawned_vehicles()
    for i, _ in pairs(spawned_vehicles) do
        delete_vehicle_at_index(i)
    end
end
local function spawn_animal_at_index(i)
    local data = animal_spawn_data[i]
    local model_hash = util.joaat(data.model_name)
    if not request_model(model_hash) then return end

    local pos = data.pos
    local ped = PED.CREATE_PED(28, model_hash, pos.x, pos.y, pos.z, 0.0, true, false)
    ENTITY.SET_ENTITY_AS_MISSION_ENTITY(ped, true, true)
    PED.SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(ped, true)
    TASK.TASK_WANDER_STANDARD(ped, 10.0, 10)
    spawned_animals[i] = ped
    util.toast("🐾 Animal spawn: " .. data.model_name)
end
local function delete_ped_at_index(i)
    local ped = spawned_peds[i]
    if ped and ENTITY.DOES_ENTITY_EXIST(ped) then
        TASK.CLEAR_PED_TASKS_IMMEDIATELY(ped)
        ENTITY.SET_ENTITY_AS_NO_LONGER_NEEDED(ped)
        entities.delete_by_handle(ped)
    end
    spawned_peds[i] = nil
end
local function delete_animal_at_index(i)
    local ped = spawned_animals[i]
    if ped and ENTITY.DOES_ENTITY_EXIST(ped) then
        entities.delete_by_handle(ped)
    end
    spawned_animals[i] = nil
end
local function clear_all_spawned_animals()
    for i, _ in pairs(spawned_animals) do
        delete_animal_at_index(i)
    end
end
local function spawn_modnpc_at_index(i)
    local npcData = modnpc_spawn_data[i]
    if not npcData then return end
    local modelHash = util.joaat(npcData.model_name)
    if not request_model(modelHash) then
        util.toast("❌ Échec chargement modèle : " .. npcData.model_name)
        return
    end
    local pos = v3(npcData.pos.x, npcData.pos.y, npcData.pos.z)
    local ped = entities.create_ped(28, modelHash, pos, 0.0)
    if ped then
        spawned_modnpc[i] = ped
        local blip = HUD.ADD_BLIP_FOR_ENTITY(ped)
        HUD.SET_BLIP_SPRITE(blip, 280)
        HUD.SET_BLIP_COLOUR(blip, 2)
        HUD.BEGIN_TEXT_COMMAND_SET_BLIP_NAME("STRING")
        HUD.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("Mod NPC")
        HUD.END_TEXT_COMMAND_SET_BLIP_NAME(blip)
        modnpc_blips[i] = blip
        local animDict = "amb@world_human_bum_slumped@male@laying_on_left_side@base"
        local animName = "base"
        STREAMING.REQUEST_ANIM_DICT(animDict)
        local timeout = util.current_time_millis() + 5000
        while not STREAMING.HAS_ANIM_DICT_LOADED(animDict) do
            if util.current_time_millis() > timeout then
                util.toast("⏰ Timeout chargement anim")
                break
            end
            util.yield()
        end
        TASK.TASK_PLAY_ANIM(ped, animDict, animName, 8.0, -8.0, -1, 1, 0, false, false, false)
    end
end
local function delete_modnpc_at_index(i)
    if spawned_modnpc[i] then
        if ENTITY.DOES_ENTITY_EXIST(spawned_modnpc[i]) then
            entities.delete_by_handle(spawned_modnpc[i])
        end
        spawned_modnpc[i] = nil
    end
    if modnpc_blips[i] then
        modnpc_blips[i] = nil
    end
end
local function clear_all_spawned_modnpc()
    for i, _ in pairs(spawned_modnpc) do
        delete_modnpc_at_index(i)
    end
end
local last_check_time_vehicles = 0
util.create_tick_handler(function()
    local now = util.current_time_millis()
    if vehicles_active and now - last_check_time_vehicles > 10000 then
        last_check_time_vehicles = now
        if not NETWORK.NETWORK_IS_SESSION_ACTIVE() then return true end
        local playerPed = PLAYER.PLAYER_PED_ID()
        local playerPos = ENTITY.GET_ENTITY_COORDS(playerPed, true)
        for i, vehicleData in pairs(vehicle_spawn_data) do
            local spawnPos = vehicleData.pos
            local distToSpawn = SYSTEM.VDIST(playerPos.x, playerPos.y, playerPos.z, spawnPos.x, spawnPos.y, spawnPos.z)
            if distToSpawn <= vehicle_spawn_distance then
                if not spawned_vehicles[i] then
                    spawn_vehicle_at_index(i)
                end
            end
            if spawned_vehicles[i] then
                local veh = spawned_vehicles[i]
                if ENTITY.DOES_ENTITY_EXIST(veh) then
                    local vehPos = ENTITY.GET_ENTITY_COORDS(veh, true)
                    local distToVeh = SYSTEM.VDIST(playerPos.x, playerPos.y, playerPos.z, vehPos.x, vehPos.y, vehPos.z)

                    if distToVeh > vehicle_despawn_distance then
                        delete_vehicle_at_index(i)
                    end
                else
                    spawned_vehicles[i] = nil
                end
            end
        end
    end
    return true
end)
local last_check_time_animals = 0
util.create_tick_handler(function()
    local now = util.current_time_millis()
    if animals_active and now - last_check_time_animals > 10000 then
        last_check_time_animals = now
        if not NETWORK.NETWORK_IS_SESSION_ACTIVE() then return true end
        local playerPed = PLAYER.PLAYER_PED_ID()
        local playerPos = ENTITY.GET_ENTITY_COORDS(playerPed, true)
        for i, animalData in pairs(animal_spawn_data) do
            local spawnPos = animalData.pos
            local distToSpawn = SYSTEM.VDIST(playerPos.x, playerPos.y, playerPos.z, spawnPos.x, spawnPos.y, spawnPos.z)
            if distToSpawn <= animal_spawn_distance then
                if not spawned_animals[i] then
                    spawn_animal_at_index(i)
                end
            end
            if spawned_animals[i] then
                local ped = spawned_animals[i]
                if ENTITY.DOES_ENTITY_EXIST(ped) then
                    local pedPos = ENTITY.GET_ENTITY_COORDS(ped, true)
                    local distToPed = SYSTEM.VDIST(playerPos.x, playerPos.y, playerPos.z, pedPos.x, pedPos.y, pedPos.z)

                    if distToPed > animal_despawn_distance then
                        delete_animal_at_index(i)
                    end
                else
                    spawned_animals[i] = nil
                end
            end
        end
    end
    return true
end)
local last_check_time_modnpc = 0
util.create_tick_handler(function()
    local now = util.current_time_millis()
    if modnpc_active and now - last_check_time_modnpc > 10000 then
        last_check_time_modnpc = now
        if not NETWORK.NETWORK_IS_SESSION_ACTIVE() then return true end
        local playerPed = PLAYER.PLAYER_PED_ID()
        local playerPos = ENTITY.GET_ENTITY_COORDS(playerPed, true)
        for i, npcData in pairs(modnpc_spawn_data) do
            local spawnPos = npcData.pos
            local distToSpawn = SYSTEM.VDIST(playerPos.x, playerPos.y, playerPos.z, spawnPos.x, spawnPos.y, spawnPos.z)
            if distToSpawn <= modnpc_spawn_distance then
                if not spawned_modnpc[i] then
                    spawn_modnpc_at_index(i)
                end
            end
            if spawned_modnpc[i] then
                local ped = spawned_modnpc[i]
                if ENTITY.DOES_ENTITY_EXIST(ped) then
                    local pedPos = ENTITY.GET_ENTITY_COORDS(ped, true)
                    local distToPed = SYSTEM.VDIST(playerPos.x, playerPos.y, playerPos.z, pedPos.x, pedPos.y, pedPos.z)

                    if distToPed > modnpc_despawn_distance then
                        delete_modnpc_at_index(i)
                    end
                else
                    spawned_modnpc[i] = nil
                end
            end
        end
    end
    return true
end)
menu.toggle(menu.my_root(), "Activer spawn véhicules", {}, "", function(state)
    vehicles_active = state
    animals_active = state
    modnpc_active = state
    if not state then
        clear_all_spawned_vehicles()
        clear_all_spawned_animals()
        clear_all_spawned_modnpc()
    end
end)
local food_menu = menu.list(menu.my_root(), "🍔 Menu nourriture (invisible)", {}, "", function() end)
menu.set_visible(food_menu, false) -- le menu est caché par défaut
local function eat_burger()
    local playerPed = PLAYER.PLAYER_PED_ID()
    local animDict = "mp_player_inteat@burger"
    local animName = "mp_player_int_eat_burger"
    STREAMING.REQUEST_ANIM_DICT(animDict)
    local timeout = util.current_time_millis() + 5000
    while not STREAMING.HAS_ANIM_DICT_LOADED(animDict) do
        if util.current_time_millis() > timeout then return end
        util.yield()
    end
    TASK.TASK_PLAY_ANIM(playerPed, animDict, animName, 8.0, -8.0, 3000, 0, 0, false, false, false)
end
local function clear_all_food_vendors()
    for i, ped in pairs(spawned_food_vendors) do
        if ped and ENTITY.DOES_ENTITY_EXIST(ped) then
            entities.delete_by_handle(ped)
        end
    end
    spawned_food_vendors = {}
end
util.create_tick_handler(function()
    local playerPed = PLAYER.PLAYER_PED_ID()
    local playerPos = ENTITY.GET_ENTITY_COORDS(playerPed, true)
    for _, ped in pairs(spawned_food_vendors) do
        if ped and ENTITY.DOES_ENTITY_EXIST(ped) then
            local pos = ENTITY.GET_ENTITY_COORDS(ped, true)
            local dist = SYSTEM.VDIST(playerPos.x, playerPos.y, playerPos.z, pos.x, pos.y, pos.z)
            if dist < 2.5 then
                show_help_text("Appuyez sur ~y~E~s~ ou ~y~→~s~ pour ouvrir le menu nourriture")
                if PAD.IS_CONTROL_JUST_PRESSED(0, 38) or PAD.IS_CONTROL_JUST_PRESSED(0, 175) then
                    eat_burger()
                    give_money(-5)
                    food_ui_visible = true
                    food_ui_timer = util.current_time_millis() + 5000 -- affiché 5 sec

                end
            end
        end
    end
    return true
end)
util.on_stop(function()
    clear_all_food_vendors()
    delete_sign()
end)
util.create_tick_handler(function()
    draw_food_ui()
    return true
end)
local function set_blip_visibility(zone, visible)
    if visible then
        if zone.blip_id == -1 then
            zone.blip_id = HUD.ADD_BLIP_FOR_COORD(zone.zone_pos.x, zone.zone_pos.y, zone.zone_pos.z)
        end
        HUD.SET_BLIP_SPRITE(zone.blip_id, -1)
        HUD.SET_BLIP_COLOUR(zone.blip_id, 2)
        HUD.SET_BLIP_SCALE(zone.blip_id, 0.8)
        HUD.BEGIN_TEXT_COMMAND_SET_BLIP_NAME("STRING")
        HUD.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(zone.name)
        HUD.END_TEXT_COMMAND_SET_BLIP_NAME(zone.blip_id)
    else
        if zone.blip_id ~= -1 then
            HUD.SET_BLIP_SPRITE(zone.blip_id, -1)
        end
    end
end
for _, zone in ipairs(zones_tp) do
    if show_blips then
        set_blip_visibility(zone, true)
    end
end
local function show_help_lol(text)
    HUD.BEGIN_TEXT_COMMAND_DISPLAY_HELP("STRING")
    HUD.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text)
    HUD.END_TEXT_COMMAND_DISPLAY_HELP(0, false, true, -1)
end
util.create_tick_handler(function()
    local player = PLAYER.PLAYER_PED_ID()
    local pos = ENTITY.GET_ENTITY_COORDS(player, true)
    local dist = SYSTEM.VDIST(pos.x, pos.y, pos.z, signCoords.x, signCoords.y, signCoords.z)
    if dist < spawnDistance and not signObj then
        spawn_sign()
    end
    if dist < interactDistance and not bought then
        show_help(DISPLAY_HELP)
        if PAD.IS_CONTROL_JUST_PRESSED(0, 51) then
            bought = true
            show_help_lol("Propriété achetée pour $100,000")
            AUDIO.PLAY_SOUND_FROM_ENTITY(-1, "PURCHASE", player, "HUD_AWARDS", false, 0) 
            give_money(-100000)
            util.toast("🏠 Tu as acheté la propriété !")
        end
    end
    if dist > removeDistance then
        delete_sign()
    end
    return true
end)
util.create_tick_handler(function()
    local playerPed = PLAYER.PLAYER_PED_ID()
    local playerPos = ENTITY.GET_ENTITY_COORDS(playerPed, true)
    for _, zone in ipairs(zones_tp) do
        local dist = SYSTEM.VDIST(playerPos.x, playerPos.y, playerPos.z, zone.zone_pos.x, zone.zone_pos.y, zone.zone_pos.z)
        if dist < zone.activation_radius then
            show_help_lol("Appuyez sur ~y~E~s~ pour entrer dans le " .. zone.name)
            if PAD.IS_CONTROL_JUST_PRESSED(0, 38) then -- Touche E
                ENTITY.SET_ENTITY_COORDS(playerPed, zone.tp_pos.x, zone.tp_pos.y, zone.tp_pos.z, false, false, false, true)
                util.toast("🚀 Téléporté vers : " .. zone.name)
            end
        end
    end
    return true
end)
